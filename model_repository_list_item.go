/*
Developer Overheid API

API for retrieveing all the API's and repositories on Developer Overheid

API version: dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RepositoryListItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryListItem{}

// RepositoryListItem struct for RepositoryListItem
type RepositoryListItem struct {
	Source *string `json:"source,omitempty"`
	OwnerName *string `json:"owner_name,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	LastChange *time.Time `json:"last_change,omitempty"`
	Url *string `json:"url,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Stars *int32 `json:"stars,omitempty"`
	ForkCount *int32 `json:"fork_count,omitempty"`
	IssueOpenCount *int32 `json:"issue_open_count,omitempty"`
	MergeRequestOpenCount *int32 `json:"merge_request_open_count,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	ProgrammingLanguages []string `json:"programming_languages,omitempty"`
}

// NewRepositoryListItem instantiates a new RepositoryListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryListItem() *RepositoryListItem {
	this := RepositoryListItem{}
	return &this
}

// NewRepositoryListItemWithDefaults instantiates a new RepositoryListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryListItemWithDefaults() *RepositoryListItem {
	this := RepositoryListItem{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *RepositoryListItem) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *RepositoryListItem) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *RepositoryListItem) SetSource(v string) {
	o.Source = &v
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *RepositoryListItem) GetOwnerName() string {
	if o == nil || IsNil(o.OwnerName) {
		var ret string
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *RepositoryListItem) HasOwnerName() bool {
	if o != nil && !IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given string and assigns it to the OwnerName field.
func (o *RepositoryListItem) SetOwnerName(v string) {
	o.OwnerName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RepositoryListItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RepositoryListItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RepositoryListItem) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RepositoryListItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RepositoryListItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RepositoryListItem) SetDescription(v string) {
	o.Description = &v
}

// GetLastChange returns the LastChange field value if set, zero value otherwise.
func (o *RepositoryListItem) GetLastChange() time.Time {
	if o == nil || IsNil(o.LastChange) {
		var ret time.Time
		return ret
	}
	return *o.LastChange
}

// GetLastChangeOk returns a tuple with the LastChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetLastChangeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastChange) {
		return nil, false
	}
	return o.LastChange, true
}

// HasLastChange returns a boolean if a field has been set.
func (o *RepositoryListItem) HasLastChange() bool {
	if o != nil && !IsNil(o.LastChange) {
		return true
	}

	return false
}

// SetLastChange gets a reference to the given time.Time and assigns it to the LastChange field.
func (o *RepositoryListItem) SetLastChange(v time.Time) {
	o.LastChange = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RepositoryListItem) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RepositoryListItem) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RepositoryListItem) SetUrl(v string) {
	o.Url = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *RepositoryListItem) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *RepositoryListItem) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *RepositoryListItem) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetStars returns the Stars field value if set, zero value otherwise.
func (o *RepositoryListItem) GetStars() int32 {
	if o == nil || IsNil(o.Stars) {
		var ret int32
		return ret
	}
	return *o.Stars
}

// GetStarsOk returns a tuple with the Stars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetStarsOk() (*int32, bool) {
	if o == nil || IsNil(o.Stars) {
		return nil, false
	}
	return o.Stars, true
}

// HasStars returns a boolean if a field has been set.
func (o *RepositoryListItem) HasStars() bool {
	if o != nil && !IsNil(o.Stars) {
		return true
	}

	return false
}

// SetStars gets a reference to the given int32 and assigns it to the Stars field.
func (o *RepositoryListItem) SetStars(v int32) {
	o.Stars = &v
}

// GetForkCount returns the ForkCount field value if set, zero value otherwise.
func (o *RepositoryListItem) GetForkCount() int32 {
	if o == nil || IsNil(o.ForkCount) {
		var ret int32
		return ret
	}
	return *o.ForkCount
}

// GetForkCountOk returns a tuple with the ForkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetForkCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ForkCount) {
		return nil, false
	}
	return o.ForkCount, true
}

// HasForkCount returns a boolean if a field has been set.
func (o *RepositoryListItem) HasForkCount() bool {
	if o != nil && !IsNil(o.ForkCount) {
		return true
	}

	return false
}

// SetForkCount gets a reference to the given int32 and assigns it to the ForkCount field.
func (o *RepositoryListItem) SetForkCount(v int32) {
	o.ForkCount = &v
}

// GetIssueOpenCount returns the IssueOpenCount field value if set, zero value otherwise.
func (o *RepositoryListItem) GetIssueOpenCount() int32 {
	if o == nil || IsNil(o.IssueOpenCount) {
		var ret int32
		return ret
	}
	return *o.IssueOpenCount
}

// GetIssueOpenCountOk returns a tuple with the IssueOpenCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetIssueOpenCountOk() (*int32, bool) {
	if o == nil || IsNil(o.IssueOpenCount) {
		return nil, false
	}
	return o.IssueOpenCount, true
}

// HasIssueOpenCount returns a boolean if a field has been set.
func (o *RepositoryListItem) HasIssueOpenCount() bool {
	if o != nil && !IsNil(o.IssueOpenCount) {
		return true
	}

	return false
}

// SetIssueOpenCount gets a reference to the given int32 and assigns it to the IssueOpenCount field.
func (o *RepositoryListItem) SetIssueOpenCount(v int32) {
	o.IssueOpenCount = &v
}

// GetMergeRequestOpenCount returns the MergeRequestOpenCount field value if set, zero value otherwise.
func (o *RepositoryListItem) GetMergeRequestOpenCount() int32 {
	if o == nil || IsNil(o.MergeRequestOpenCount) {
		var ret int32
		return ret
	}
	return *o.MergeRequestOpenCount
}

// GetMergeRequestOpenCountOk returns a tuple with the MergeRequestOpenCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetMergeRequestOpenCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MergeRequestOpenCount) {
		return nil, false
	}
	return o.MergeRequestOpenCount, true
}

// HasMergeRequestOpenCount returns a boolean if a field has been set.
func (o *RepositoryListItem) HasMergeRequestOpenCount() bool {
	if o != nil && !IsNil(o.MergeRequestOpenCount) {
		return true
	}

	return false
}

// SetMergeRequestOpenCount gets a reference to the given int32 and assigns it to the MergeRequestOpenCount field.
func (o *RepositoryListItem) SetMergeRequestOpenCount(v int32) {
	o.MergeRequestOpenCount = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *RepositoryListItem) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *RepositoryListItem) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *RepositoryListItem) SetArchived(v bool) {
	o.Archived = &v
}

// GetProgrammingLanguages returns the ProgrammingLanguages field value if set, zero value otherwise.
func (o *RepositoryListItem) GetProgrammingLanguages() []string {
	if o == nil || IsNil(o.ProgrammingLanguages) {
		var ret []string
		return ret
	}
	return o.ProgrammingLanguages
}

// GetProgrammingLanguagesOk returns a tuple with the ProgrammingLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryListItem) GetProgrammingLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProgrammingLanguages) {
		return nil, false
	}
	return o.ProgrammingLanguages, true
}

// HasProgrammingLanguages returns a boolean if a field has been set.
func (o *RepositoryListItem) HasProgrammingLanguages() bool {
	if o != nil && !IsNil(o.ProgrammingLanguages) {
		return true
	}

	return false
}

// SetProgrammingLanguages gets a reference to the given []string and assigns it to the ProgrammingLanguages field.
func (o *RepositoryListItem) SetProgrammingLanguages(v []string) {
	o.ProgrammingLanguages = v
}

func (o RepositoryListItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryListItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.OwnerName) {
		toSerialize["owner_name"] = o.OwnerName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LastChange) {
		toSerialize["last_change"] = o.LastChange
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.Stars) {
		toSerialize["stars"] = o.Stars
	}
	if !IsNil(o.ForkCount) {
		toSerialize["fork_count"] = o.ForkCount
	}
	if !IsNil(o.IssueOpenCount) {
		toSerialize["issue_open_count"] = o.IssueOpenCount
	}
	if !IsNil(o.MergeRequestOpenCount) {
		toSerialize["merge_request_open_count"] = o.MergeRequestOpenCount
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.ProgrammingLanguages) {
		toSerialize["programming_languages"] = o.ProgrammingLanguages
	}
	return toSerialize, nil
}

type NullableRepositoryListItem struct {
	value *RepositoryListItem
	isSet bool
}

func (v NullableRepositoryListItem) Get() *RepositoryListItem {
	return v.value
}

func (v *NullableRepositoryListItem) Set(val *RepositoryListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryListItem(val *RepositoryListItem) *NullableRepositoryListItem {
	return &NullableRepositoryListItem{value: val, isSet: true}
}

func (v NullableRepositoryListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


